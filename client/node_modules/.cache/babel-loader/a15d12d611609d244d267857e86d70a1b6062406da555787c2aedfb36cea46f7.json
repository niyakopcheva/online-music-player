{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\online-music-player\\\\client\\\\src\\\\components\\\\AdminPage.js\";\nimport { useEffect, useState } from \"react\";\nimport { getAuth } from \"firebase/auth\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminPage() {\n  /*\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const auth = getAuth();\r\n    useEffect(() => {\r\n      const checkRole = async () => {\r\n          const user = auth.currentUser;\r\n          if (user) {\r\n              console.log('User found:', user.uid);\r\n              try {\r\n                  const idTokenResult = await user.getIdToken(true); // Force refresh\r\n                  console.log('Custom claims:', idTokenResult.claims);\r\n                  setIsAdmin(idTokenResult.claims.role === 'admin');\r\n              } catch (error) {\r\n                  console.error('Error fetching ID token:', error);\r\n              }\r\n          } else {\r\n              console.log('No user is signed in.');\r\n          }\r\n          setLoading(false); // Ensure loading is updated\r\n      };\r\n      checkRole();\r\n  }, [auth]);\r\n    if (loading) {\r\n      return <div>Loading...</div>; // Avoid rendering before claims are verified\r\n  }\r\n    if (!isAdmin) {\r\n      alert(\"You do NOT have access to this page!\");\r\n      return <Navigate to=\"/\" />;\r\n  }\r\n      */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Welcome to the Admin Page!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 12\n  }, this);\n}\n_c = AdminPage;\nvar _c;\n$RefreshReg$(_c, \"AdminPage\");","map":{"version":3,"names":["useEffect","useState","getAuth","Navigate","jsxDEV","_jsxDEV","AdminPage","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Documents/online-music-player/client/src/components/AdminPage.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nexport default function AdminPage() {\r\n    /*\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const auth = getAuth();\r\n\r\n    useEffect(() => {\r\n        const checkRole = async () => {\r\n            const user = auth.currentUser;\r\n            if (user) {\r\n                console.log('User found:', user.uid);\r\n                try {\r\n                    const idTokenResult = await user.getIdToken(true); // Force refresh\r\n                    console.log('Custom claims:', idTokenResult.claims);\r\n                    setIsAdmin(idTokenResult.claims.role === 'admin');\r\n                } catch (error) {\r\n                    console.error('Error fetching ID token:', error);\r\n                }\r\n            } else {\r\n                console.log('No user is signed in.');\r\n            }\r\n            setLoading(false); // Ensure loading is updated\r\n        };\r\n        checkRole();\r\n    }, [auth]);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>; // Avoid rendering before claims are verified\r\n    }\r\n\r\n    if (!isAdmin) {\r\n        alert(\"You do NOT have access to this page!\");\r\n        return <Navigate to=\"/\" />;\r\n    }\r\n        */\r\n\r\n    return <div>Welcome to the Admin Page!</div>;\r\n}\r\n\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,SAASA,CAAA,EAAG;EAChC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAKI,oBAAOD,OAAA;IAAAE,QAAA,EAAK;EAA0B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAChD;AAACC,EAAA,GArCuBN,SAAS;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}